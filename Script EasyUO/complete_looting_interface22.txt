;===============================================================================
; Script Name: TrailMyx's Complete Looting Assistant Interface (Advanced Version)
; Author: TrailMyx
; Version: v2.2
; Shard OSI / FS: OSI / FS
; Revision Date: 11/8/2007
; Purpose: Interface subs for TM_CLAw Complete Looting Assistant
;-------------------------------------------------------------------------------
;============================= TM_CLAw Interface ===============================
;-------------------------------------------------------------------------------
set !TM_FunctionCalled #FALSE
if %0 = 1 && !TM_FunctionCalled = #FALSE
  gosub %1
if %0 = 2 && !TM_FunctionCalled = #FALSE
  gosub %1 %2
if %0 = 3 && !TM_FunctionCalled = #FALSE
  gosub %1 %2 %3
if %0 = 4 && !TM_FunctionCalled = #FALSE
  gosub %1 %2 %3 %4
if %0 = 5 && !TM_FunctionCalled = #FALSE
  gosub %1 %2 %3 %4 %5
if %0 = 6 && !TM_FunctionCalled = #FALSE
  gosub %1 %2 %3 %4 %5 %6
if %0 = 7 && !TM_FunctionCalled = #FALSE
  gosub %1 %2 %3 %4 %5 %6 %7
if %0 = 8 && !TM_FunctionCalled = #FALSE
  gosub %1 %2 %3 %4 %5 %6 %7 %8
if %0 = 9 && !TM_FunctionCalled = #FALSE
  gosub %1 %2 %3 %4 %5 %6 %7 %8 %9
if %0 = 10 && !TM_FunctionCalled = #FALSE
  gosub %1 %2 %3 %4 %5 %6 %7 %8 %9 %10
if %0 = 11 && !TM_FunctionCalled = #FALSE
  gosub %1 %2 %3 %4 %5 %6 %7 %8 %9 %10 %11
if %0 > 11
{
  display ok Too many arguments for "call", edit file.
  stop
}

if !TM_FunctionCalled = #TRUE
  exit
if %0 = N/A
  display ok You may not run this script directly.
else
  display ok Function " , %1 , " not found.
stop
;------------------------------------------------------------
;------------------------------------------------------------
; Modes: AUTOMATIC_SENDGOLD_LOOTGROUND_CARVE_LOOTALL_HIDEBODIES_PREVIEW_TURBO
; Examples:
; gosub TM_SetupLooter LOADFILE c:\setupclaw.txt
; gosub TM_SetupLooter AUTOMATIC_SENDGOLD_LOOTGROUND_CARVE_LOOTALL_HIDEBODIES_PREVIEW_TURBO #FALSE
sub TM_SetupLooter
  namespace push
  namespace global TM_LOOT
  set !mode %1
  set !arg %2
  set !TM_MODE !mode
  set !TM_ARG1 !arg
  repeat
  until !TM_MODE = N/A
  namespace pop
  set !TM_FunctionCalled #TRUE
return
;------------------------------------------------------------
; sub TM_LootingAssistantInitialized
; return:
;   #TRUE if looting assistant is initialized
;   #FALSE if looting assistant not initialized
sub TM_LootingAssistantInitialized
  namespace push
  namespace global TM_loot
  set #RESULT !TM_initialized
  if #RESULT <> #TRUE
    set #RESULT #FALSE
  namespace pop
  set !TM_FunctionCalled #TRUE
return #RESULT
;------------------------------------------------------------
; sub TM_PingLootingAssistant
; return:
;   PING if Looting Assistant not running, but memory space is initialized
;   PONG if Looting assistant is active and running.
sub TM_PingLootingAssistant
  namespace push
  namespace global TM_loot
  set !TM_ping PING
  wait 60
  set #RESULT !TM_ping
  namespace pop
  set !TM_FunctionCalled #TRUE
return #RESULT
;------------------------------------------------------------
; sub TM_LootInProgress
; return:
;   #TRUE if Looting is in progress, wait until #FALSE
;   #FALSE looting is idle.
sub TM_LootInProgress
  namespace push
  namespace global TM_loot
  set #RESULT !TM_loot_in_progress
  namespace pop
  set !TM_FunctionCalled #TRUE
return #RESULT
;------------------------------------------------------------
; sub TM_EnableAutoloot
; return:
;   #TRUE if Looting is in progress, wait until #FALSE
;   #FALSE looting is idle.
sub TM_EnableAutoloot
  namespace push
  namespace global TM_loot
  set !TM_loot_enable #TRUE
  namespace pop
  set !TM_FunctionCalled #TRUE
return
;------------------------------------------------------------
; sub TM_DisableAutoloot
; return:
;   #TRUE if Looting is in progress, wait until #FALSE
;   #FALSE looting is idle.
sub TM_DisableAutoloot
  namespace push
  namespace global TM_loot
  set !TM_loot_enable #FALSE
  namespace pop
  set !TM_FunctionCalled #TRUE
return
;------------------------------------------------------------
; sub TM_EvaluateContainer
; %2 - source container to evaluate
; %3 - destination container ID to place items passing evaluation
; return:
;   none
sub TM_EvaluateContainer
  namespace push
  namespace global TM_loot
  set !TM_eval_source %1
  set !TM_eval_destination %2
  set !TM_loot_artifact_success #FALSE
  set !TM_loot_success #FALSE
  set !TM_eval_request #TRUE
  set !TM_loot_in_progress #TRUE
  namespace pop
  set !TM_FunctionCalled #TRUE
return
;------------------------------------------------------------
; sub TM_AddArtifact
; %2 - source container to evaluate
; return:
;   current artifact count maintained.
sub TM_AddArtifact
  namespace push
  namespace global TM_loot
  set !TM_artifact . !TM_artifact_index %1
  set !TM_artifact_index !TM_artifact_index + 1
  set #RESULT !TM_artifact_index
  namespace pop
  set !TM_FunctionCalled #TRUE
return #RESULT
;------------------------------------------------------------
; sub TM_ClearArtifactList
;   current artifact count maintained.
sub TM_ClearArtifactList
  namespace push
  namespace global TM_loot
  set !TM_artifact_index 0
  namespace pop
  set !TM_FunctionCalled #TRUE
return #RESULT
;------------------------------------------------------------
; sub TM_ArtifactCount
;   current artifact count maintained.
sub TM_ArtifactCount
  namespace push
  namespace global TM_loot
  set #RESULT !TM_artifact_index
  namespace pop
  set !TM_FunctionCalled #TRUE
return #RESULT

