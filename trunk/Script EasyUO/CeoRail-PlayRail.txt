;==================================
; Script Name: CEORailRunner
; Author: CEO
; Version: 1.0
; Client Tested with: 4.0.0.p
; EUO version tested with: 1.40 (0056)
; Shard OSI / FS:
; Revision Date:
; Public Release: 09/19/2003
; Purpose: Standalone RailRunner that allows you to easily incorporate rails into your scripts.
;==================================
;
; Uses the following Global Variables:
;
;   *500 : Rail Status:  (READONLY)
;          Values:
;               waiting - Waiting for a railfile and *501 = "start"
;               initializing - Loading rail file
;               moving - moving to a rail spot
;               pathfinding - path finding to a rail spot (move failed)
;               paused - rail script paused
;               enemy - enemy spotted  (from %enemytypes in railfile)
;               done - rail movement completed x number of cycles according to *503
;               halted - script halted
;   *501 : User Control: Used to control rail movement through an external program.
;            Values:
;                   start- Start the rail program
;                  pause - pause rail program
;                  resume - resume rail program
;                  stop - stop rail program
;    *502 : Railfilename to use (In RoadKill's Railmaker format)
;    *503 : Number of times to run rail.  (Defaults to -1, loop forever)
;
;         Linking Rail Files:
;            By setting this to something other then -1 you can change *502 to a new railfilename
;            after the rail starts and once the rail completes it'll chain to the next rail identified by *502
;.
;   *504 : Pace Control : Tells how fast your character will move.
;            Values:
;                  walk - Character walks
;                   run - Character runs (Default)
;   *505 : Enemy Pace Control : Tells what to do when enemy spotted.
;         Values:
;               wait - Waits while enemys are around, automatically resumes when no more are found
;               pause - pause execution of railrunner, requires *501 = RESUME to restart
;               run -  Switch character to always run (if it isn't) and then run on the rail until enemy is gone (Default)
initevents
set %version 1.0
; Initialize the global variables
set *500 Waiting
set *501 start
set *502 rail_casa.txt
set *503 -1
set *504 run
set *505 run
set %last504 *504
set %endspot 72
set %count 0
gosub InitMenu
%endspot
set #menubutton N/A
gosub DisplayStatus yellow

WaitForStart:
wait 1s
  if *502 = N/A || *501 <> START
    goto WaitForStart
menu delete t1
menu text t1 10 5 Railfile: *502
set *500 Initializing
gosub DisplayStatus blue
set %endspot N/A
set %count 0
call *502
if %endspot = N/A
{
  menu delete t1
  menu delete t2
  menu text t1 10 5 Railfile: *502 , #spc , (INVALID)
  set *500 halt
  menu font bgcolor red
  gosub DisplayStatus black
  halt
}
set %last502 *502
if *504 = WALK
{
  gosub WalkOn
  goto MainLoop
}
gosub RunOn
MainLoop:
for %i 1 %endspot
{
  set %enemyfound #false
  finditem %ENEMYTYPES G_ , %SEARCHRANGE
  if #findkind <> -1
    gosub EnemyFound
  if *501 = PAUSE || #menubutton = PAUSE
    gosub RailPause
  if *501 = STOP
    halt
  if %last504 <> *504 && ! %enemyfound
    gosub SetPace
  set %oldcharposx #charposx
  set %oldcharposy #charposy
  set %x %x . %i
  set %y %y . %i
  set %z %z . %i
  menu delete d1
  menu text d1 280 5 %i
  set *500 moving
  gosub DisplayStatus green
  move %x %y 0 4s
  if #charposx <> %x && #charposy <> %y
  {
    set *500 pathfinding
    gosub DisplayStatus yellow
    event pathfind %x %y %z
    wait 4s
  }
}
set %count %count + 1
if %count < *503 || *503 = -1
  goto MainLoop
if %last502 <> *502
  goto WaitForStart
set *501 N/A
set *500 done
gosub DisplayStatus white
goto WaitForStart

sub EnemyFound
set %enemyfound #true
set *500 enemy
gosub DisplayStatus red
if *505 = WAIT
{
  gosub EnemyWait
  return
}
if *505 = PAUSE
{
  gosub EnemyPause
  return
}
if *504 = RUN || %last504 = RUN
  return
gosub RunOn
set %last504 run
menu delete d2
menu font bgcolor red
menu font color white
menu font size 9
menu text d2 225 20 Running
menu font bgcolor black
menu font color red
menu font size 10
return

sub EnemyPause
menu font bgcolor red
gosub DisplayStatus black
menu font bgcolor black
menu delete pause
menu button resume 10 45  80 25 RESUME
set #menubutton N/A
enemy1:
wait 1s
if #menubutton = RESUME
  goto resume1
if *501 <> RESUME
  goto enemy1
resume1:
menu delete resume
menu button pause 10 45  80 25 PAUSE
set *501 N/A
set #menubutton N/A
return

sub EnemyWait
menu font bgcolor red
gosub DisplayStatus black
menu font bgcolor black
menu delete pause
menu button resume 10 45  80 25 RESUME
set #menubutton N/A
enemy2:
wait 1s
if #menubutton = RESUME
  goto resume2
finditem %ENEMYTYPES G_ , %SEARCHRANGE
if #findkind <> -1
  goto enemy2
resume2:
menu delete resume
menu button pause 10 45  80 25 PAUSE
set #menubutton N/A
return

sub RailPause
set *500 paused
menu delete pause
menu button resume 10 45  80 25 RESUME
set #menubutton N/A
gosub DisplayStatus white
wait2:
wait 1s
if #menubutton = RESUME
  goto resume3
if *501 <> RESUME
  goto wait2
resume3:
menu delete resume
menu button pause 10 45  80 25 PAUSE
set *501 N/A
set #menubutton N/A
return

Sub RunON
;purpose: toggle always run on
event macro 32 0
wait 10 10
if now_on IN #SYSMSG
  return
event macro 32 0
return

Sub WalkOn
;purpose: toggle always run off
event macro 32 0
wait 10 10
if now_off IN #SYSMSG
  return
event macro 32 0
return

sub InitMenu
menu clear
menu window size 325 75
menu window title CEORailRunner %version
menu window color black
menu font bgcolor BLACK
menu font color red
menu text t1 10 5 Railfile: None
menu text t2 225 5 Railspot:
menu text t3 10 25 Status:
menu button pause 10 45  80 25 PAUSE
menu show 10 10
menu hideeuo
return

sub DisplayStatus
menu font color %1
menu delete status
menu text status 55 25 *500
menu font color red
return

sub DisplayWalkRun
menu delete d2
menu font color blue
menu font size 9
if *504 = WALK
{
  menu text d2 225 20 Walking
  menu font color red
  menu font size 10
  return
}
menu text d2 225 20 Running
menu font color red
menu font size 10
return

sub SetPace
set %last504 *504
if *504 = WALK
{
  gosub WalkOn
  Gosub DisplayWalkRun
  return
}
gosub RunOn
Gosub DisplayWalkRun
return
